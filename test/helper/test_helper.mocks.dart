// Mocks generated by Mockito 5.4.5 from annotations
// in technical_test_venteny_indonesia/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:sqflite/sqflite.dart' as _i4;
import 'package:technical_test_venteny_indonesia/src/core/helper/database_sqlite.helper.dart'
    as _i8;
import 'package:technical_test_venteny_indonesia/src/data/datasources/local/task.localdatasource.dart'
    as _i6;
import 'package:technical_test_venteny_indonesia/src/data/models/dto/task_create_or_update.dto.dart'
    as _i7;
import 'package:technical_test_venteny_indonesia/src/data/models/response/task_operation_response.model.dart'
    as _i3;
import 'package:technical_test_venteny_indonesia/src/data/models/task.model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskModel_0 extends _i1.SmartFake implements _i2.TaskModel {
  _FakeTaskModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTaskOperationResponseModel_1 extends _i1.SmartFake
    implements _i3.TaskOperationResponseModel {
  _FakeTaskOperationResponseModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryCursor_4 extends _i1.SmartFake implements _i4.QueryCursor {
  _FakeQueryCursor_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBatch_5 extends _i1.SmartFake implements _i4.Batch {
  _FakeBatch_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSource extends _i1.Mock
    implements _i6.TaskLocalDataSource {
  MockTaskLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.TaskModel>> get() =>
      (super.noSuchMethod(
            Invocation.method(#get, []),
            returnValue: _i5.Future<List<_i2.TaskModel>>.value(
              <_i2.TaskModel>[],
            ),
          )
          as _i5.Future<List<_i2.TaskModel>>);

  @override
  _i5.Future<_i2.TaskModel> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i5.Future<_i2.TaskModel>.value(
              _FakeTaskModel_0(this, Invocation.method(#getById, [id])),
            ),
          )
          as _i5.Future<_i2.TaskModel>);

  @override
  _i5.Future<_i3.TaskOperationResponseModel> add(
    _i7.TaskCreateOrUpdateDto? task,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#add, [task]),
            returnValue: _i5.Future<_i3.TaskOperationResponseModel>.value(
              _FakeTaskOperationResponseModel_1(
                this,
                Invocation.method(#add, [task]),
              ),
            ),
          )
          as _i5.Future<_i3.TaskOperationResponseModel>);

  @override
  _i5.Future<_i3.TaskOperationResponseModel> update(
    int? id,
    _i7.TaskCreateOrUpdateDto? task,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [id, task]),
            returnValue: _i5.Future<_i3.TaskOperationResponseModel>.value(
              _FakeTaskOperationResponseModel_1(
                this,
                Invocation.method(#update, [id, task]),
              ),
            ),
          )
          as _i5.Future<_i3.TaskOperationResponseModel>);

  @override
  _i5.Future<_i3.TaskOperationResponseModel> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i5.Future<_i3.TaskOperationResponseModel>.value(
              _FakeTaskOperationResponseModel_1(
                this,
                Invocation.method(#delete, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.TaskOperationResponseModel>);
}

/// A class which mocks [DatabaseSQLiteHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseSQLiteHelper extends _i1.Mock
    implements _i8.DatabaseSQLiteHelper {
  MockDatabaseSQLiteHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i4.Database>.value(
              _FakeDatabase_2(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i4.Database>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i4.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);

  @override
  _i4.Database get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _FakeDatabase_2(this, Invocation.getter(#database)),
          )
          as _i4.Database);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function(_i4.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#transaction, [action], {#exclusive: exclusive}),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#exclusive: exclusive},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#exclusive: exclusive},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> readTransaction<T>(
    _i5.Future<T> Function(_i4.Transaction)? action,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readTransaction, [action]),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#readTransaction, [action]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(#readTransaction, [action]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> devInvokeMethod<T>(String? method, [Object? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#devInvokeMethod, [method, arguments]),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#devInvokeMethod, [method, arguments]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(#devInvokeMethod, [method, arguments]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#devInvokeSqlMethod, [
                      method,
                      sql,
                      arguments,
                    ]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_3<T>(
                  this,
                  Invocation.method(#devInvokeSqlMethod, [
                    method,
                    sql,
                    arguments,
                  ]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [sql, arguments]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#rawInsert, [sql, arguments]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i4.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #insert,
              [table, values],
              {
                #nullColumnHack: nullColumnHack,
                #conflictAlgorithm: conflictAlgorithm,
              },
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [table],
              {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset,
              },
            ),
            returnValue: _i5.Future<List<Map<String, Object?>>>.value(
              <Map<String, Object?>>[],
            ),
          )
          as _i5.Future<List<Map<String, Object?>>>);

  @override
  _i5.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#rawQuery, [sql, arguments]),
            returnValue: _i5.Future<List<Map<String, Object?>>>.value(
              <Map<String, Object?>>[],
            ),
          )
          as _i5.Future<List<Map<String, Object?>>>);

  @override
  _i5.Future<_i4.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #rawQueryCursor,
              [sql, arguments],
              {#bufferSize: bufferSize},
            ),
            returnValue: _i5.Future<_i4.QueryCursor>.value(
              _FakeQueryCursor_4(
                this,
                Invocation.method(
                  #rawQueryCursor,
                  [sql, arguments],
                  {#bufferSize: bufferSize},
                ),
              ),
            ),
          )
          as _i5.Future<_i4.QueryCursor>);

  @override
  _i5.Future<_i4.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #queryCursor,
              [table],
              {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset,
                #bufferSize: bufferSize,
              },
            ),
            returnValue: _i5.Future<_i4.QueryCursor>.value(
              _FakeQueryCursor_4(
                this,
                Invocation.method(
                  #queryCursor,
                  [table],
                  {
                    #distinct: distinct,
                    #columns: columns,
                    #where: where,
                    #whereArgs: whereArgs,
                    #groupBy: groupBy,
                    #having: having,
                    #orderBy: orderBy,
                    #limit: limit,
                    #offset: offset,
                    #bufferSize: bufferSize,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i4.QueryCursor>);

  @override
  _i5.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#rawUpdate, [sql, arguments]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i4.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #update,
              [table, values],
              {
                #where: where,
                #whereArgs: whereArgs,
                #conflictAlgorithm: conflictAlgorithm,
              },
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#rawDelete, [sql, arguments]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [table],
              {#where: where, #whereArgs: whereArgs},
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i4.Batch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeBatch_5(this, Invocation.method(#batch, [])),
          )
          as _i4.Batch);
}
